# -*- coding: utf-8 -*-
"""Overview of Colaboratory Features

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/basic_features_overview.ipynb
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib

# Load the trained Random Forest model
model = joblib.load('random_forest_employee_retention_v1.pkl')

# Function to predict employee retention
def predict_retention(satisfaction_level, last_evaluation, average_monthly_hours, time_in_company, salary):
    input_data = np.array([[satisfaction_level, last_evaluation, average_monthly_hours, time_in_company, salary]])
    prediction = model.predict(input_data)
    probability = model.predict_proba(input_data)
    return prediction[0], probability[0]

# Streamlit UI
st.title("Employee Retention Prediction")

# User inputs
satisfaction_level = st.number_input("Satisfaction Level", min_value=0.0, max_value=1.0, value=0.66)
last_evaluation = st.number_input("Last Evaluation", min_value=0.0, max_value=1.0, value=0.54)
average_monthly_hours = st.number_input("Average Monthly Hours", min_value=0, value=120)
time_in_company = st.number_input("Time In Company (years)", min_value=0, value=5)
salary = st.selectbox("Salary", ["low", "medium", "high"])

if st.button("Predict"):
    prediction, probability = predict_retention(satisfaction_level, last_evaluation, average_monthly_hours, time_in_company, salary)

    if prediction == 1:
        st.success("Employee Expected To: STAY")
        st.write(f"Probability To Stay: {probability[1] * 100:.1f}%")
        st.write(f"Probability To Leave: {probability[0] * 100:.1f}%")
    else:
        st.error("Employee Expected To: LEAVE")
        st.write(f"Probability To Stay: {probability[1] * 100:.1f}%")
        st.write(f"Probability To Leave: {probability[0] * 100:.1f}%")