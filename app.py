# -*- coding: utf-8 -*-
"""Overview of Colaboratory Features

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/basic_features_overview.ipynb
"""
import streamlit as st
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
import pickle

# Load the dataset
@st.cache_data
def load_data():
    df = pd.read_csv('data.csv')  # Replace with your actual CSV file path
    return df

# Train the Random Forest model
def train_model(df):
    # Encode categorical variables
    le = LabelEncoder()
    df['salary'] = le.fit_transform(df['salary'])

    # Define features and target
    X = df[['satisfaction_level', 'last_evaluation', 'number_project', 'average_montly_hours', 'time_spend_company']]
    y = df['left']  # Target variable for prediction (0: Stay, 1: Leave)

    # Split the data
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Train the model
    model = RandomForestClassifier()
    model.fit(X_train, y_train)

    return model, le

# Save the model
def save_model(model):
    with open('random_forest_model.pkl', 'wb') as file:
        pickle.dump(model, file)

# Load the model
def load_model():
    with open('random_forest_model.pkl', 'rb') as file:
        return pickle.load(file)

# Main function
def main():
    st.title("Employee Stay or Leave Prediction")

    # Load data
    df = load_data()

    # Train model if not already trained
    if 'model' not in st.session_state:
        model, le = train_model(df)
        save_model(model)
        st.session_state.model = model
        st.session_state.label_encoder = le
    else:
        model = st.session_state.model
        le = st.session_state.label_encoder

    # User input
    st.sidebar.header("Input Features")
    
    # Satisfaction Level Input
    satisfaction_level = st.sidebar.number_input("Satisfaction Level", min_value=0.09, max_value=1.0, value=0.38, step=0.01)
    
    # Last Evaluation Input
    last_evaluation = st.sidebar.number_input("Last Evaluation", min_value=0.36, max_value=1.0, value=0.53, step=0.01)
    
    # Number of Projects Input
    number_project = st.sidebar.selectbox("Number of Projects", range(2, 8))
    
    # Average Monthly Hours Input
    average_montly_hours = st.sidebar.number_input("Average Monthly Hours", min_value=96, max_value=310, value=157, step=1)
    
    # Time Spent in Company Input
    time_spend_company = st.sidebar.selectbox("Time Spent in Company (Years)", range(2, 11))
    
    # Salary Selection
    salary = st.sidebar.selectbox("Salary Level", ["low", "medium", "high"])

    # Predict button
    if st.sidebar.button("Predict"):
        # Prepare input data for prediction
        input_data = [[satisfaction_level, last_evaluation, number_project, average_montly_hours, time_spend_company]]
        prediction = model.predict(input_data)
        probabilities = model.predict_proba(input_data)[0]

        # Determine expected outcome
        expected_outcome = "STAY" if prediction[0] == 0 else "LEAVE"
        probability_stay = probabilities[0] * 100
        probability_leave = probabilities[1] * 100

        # Display results
        st.write(f"Employee Expected To: {expected_outcome}")
        st.write(f"Probability To Stay: {probability_stay:.1f}%")
        st.write(f"Probability To Leave: {probability_leave:.1f}%")

if __name__ == "__main__":
    main()

