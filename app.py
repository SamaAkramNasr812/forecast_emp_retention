# -*- coding: utf-8 -*-
"""Overview of Colaboratory Features

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/basic_features_overview.ipynb
"""
import streamlit as st
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
import pickle

# Load the dataset
@st.cache_data
def load_data():
    df = pd.read_csv('data.csv')  # Replace with your actual CSV file path
    return df

# Train the Random Forest model
def train_model(df):
    # Encode categorical variables
    le = LabelEncoder()
    df['salary'] = le.fit_transform(df['salary'])

    # Define features and target
    X = df[['satisfaction_level', 'last_evaluation', 'number_project', 'average_montly_hours', 'time_spend_company']]
    y = df['salary']

    # Split the data
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Train the model
    model = RandomForestClassifier()
    model.fit(X_train, y_train)

    return model, le

# Save the model
def save_model(model):
    with open('random_forest_model.pkl', 'wb') as file:
        pickle.dump(model, file)

# Load the model
def load_model():
    with open('random_forest_model.pkl', 'rb') as file:
        return pickle.load(file)

# Main function
def main():
    st.title("Employee Salary Prediction")

    # Load data
    df = load_data()

    # Train model if not already trained
    if 'model' not in st.session_state:
        model, le = train_model(df)
        save_model(model)
        st.session_state.model = model
        st.session_state.label_encoder = le
    else:
        model = st.session_state.model
        le = st.session_state.label_encoder

    # User input
    st.sidebar.header("Input Features")
    satisfaction_level = st.sidebar.slider("Satisfaction Level", 0.0, 1.0, 0.5)
    last_evaluation = st.sidebar.slider("Last Evaluation", 0.0, 1.0, 0.5)
    number_project = st.sidebar.slider("Number of Projects", 1, 10, 3)
    average_montly_hours = st.sidebar.slider("Average Monthly Hours", 100, 300, 150)
    time_spend_company = st.sidebar.slider("Time Spent in Company (Years)", 1, 10, 3)

    # Make prediction
    input_data = [[satisfaction_level, last_evaluation, number_project, average_montly_hours, time_spend_company]]
    prediction = model.predict(input_data)
    salary_prediction = le.inverse_transform(prediction)[0]

    st.write(f"Predicted Salary Level: {salary_prediction}")

if __name__ == "__main__":
    main()
