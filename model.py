# -*- coding: utf-8 -*-
"""Forecasting Employee Retention| Streamlit Appüë®‚Äçüíº

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/forecasting-employee-retention-streamlit-app-3cb2ec5d-2af3-4912-ae2f-46628f91b00d.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20241005/auto/storage/goog4_request%26X-Goog-Date%3D20241005T122011Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D3688f11e6f9ab0f19595b6c4a6ce65d9a3ad73d2158c1d5097b934df642db2d66293956cebcf80693bb2f774996597ab0bdb58f98e5842d8fa008b1cc49684629c4df5afbc98977840497f9299d41803373863be1013185c59c07d76f2702c2bc059270166051fbb8d1e326fa7d0dc88e6d3603fb855f501d9c152e8e0671f9c9de46cca49a6278c95ecaaed78f6a0f81d682d615ff26adc2abcbd4149f2c2dce5ac26aa5ea747ea102077dadd48d7ec23daf0f38383050c94da0c05ad69355095f9a7f42ddbde872faac97067a51c9b859f4a8afdd12b20b26c14cfc75855b9630e41fa9800338d3473cdd3e7c7df941b9e6e0eaa8f9374bd149370028ce953

# Importing Toolkitsüíº

<h2 style= "background-color: #111;
            padding: 18px;
            font: bold 26px tahoma;
            text-align:center;
            color:gold;
            border: 3px solid red;
            border-radius: 5px;">   
    üöÄüìä The Link To My Streamlit Web APP For This Project In The Last Section Below üöÄü§©
</h2>
"""

import pandas as pd
import numpy as np
import plotly.express as px
from plotly.offline import iplot


from sklearn.ensemble import RandomForestClassifier


from sklearn.metrics import mean_absolute_error, mean_squared_error, accuracy_score, confusion_matrix, classification_report
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from sklearn.model_selection import train_test_split, cross_val_score, KFold

import warnings
warnings.filterwarnings("ignore")
pd.set_option('future.no_silent_downcasting', True)
pd.options.mode.copy_on_write = "warn"

"""## Visualizations Customized Functionüìä"""

# Adding Line To Plotly Figure
def add_line(x0 = 0, y0 = 0, x1 = 0, y1 = 0,
             line_color = "#00DFA2", font_color = "#3C486B",
             xposition = "right", text = "Text"):
    fig.add_shape(type='line',
                  x0 = x0,
                  y0 = y0,
                  x1 = x1,
                  y1 = y1 + 2,
                  line = {
                      "color" : line_color,
                      "width" : 3,
                      "dash" : "dashdot"
                  },
                  label={
                      "text" : f"\t{text}:{x1: 0.2f}\t".expandtabs(2),
                      "textposition": "end",
                      "yanchor" :"top",
                      "xanchor" :xposition,
                      "textangle" :0,
                      "font": {
                          "size": 14,
                          "color" :font_color,
                          "family" : "arial"

                      },
                  }
                 )

def custome_layout(title_size = 28, hover_font_size = 16, showlegend = False):
    fig.update_layout(
    showlegend = showlegend,
    title = {
        "font" :{
            "size" :title_size,
            "family" : "tahoma"
        }
    },
    hoverlabel = {
        "bgcolor" :"#111",
        "font_size" : hover_font_size,
        "font_family" :"arial"
    }

)

"""# Loading Data"""

df = pd.read_csv("/content/HR_comma_sep.csv")

"""# Let's Get Quick Overview üßê"""

df.info()

df.sample(10, random_state=13)

df.describe().T

"""# Data Preprocessing

## ‚ô† Now, let's check for duplicates records
"""

df.duplicated().sum()

"""<p style = "color: gold;
            font: bold 22px arial;
            padding: 15px;
            background-color: #112">
    ‚Ä¢ I think we have to remove the duplicate rows because they will affect our modelüòâüòâ
</p>
"""

# Drop Duplicates Records
df.drop_duplicates(inplace=True)

# Reset Our Index to be Orderd
df.reset_index(inplace=True, drop=True)

"""# Now, It's Time To Dive Deeper Into Importnat Columnsü§ø

<p style = "color: #FF78F0;
            font: bold 19px arial;
            padding: 15px;
            background-color: #111;
            border: 3px solid violet;
            border-radius: 8px">
    ‚ô£ Satisfaction Column  üëåü§ó
</p>
"""

fig = px.box(
    x = df["satisfaction_level"],
    title= "Satisfaction Level Distribution & 5-Summary",
    template="plotly_dark",
    labels={"x" :"Satisfaction Level"},
)

custome_layout(showlegend=False)

iplot(fig)

"""<p style = "color: gold;
            font: bold 22px arial;
            padding: 15px;
            background-color: #112">
 #  From Our Box Plot üëåüòâ
    <br>
    <br>
    ‚ñ∫ We Can Notice that The Sataisfaction Level has a Moderate Left Skewness.
    <br>
    <br>
    ‚ñ∫ 50% of Sataisfaction Level Data In The Range [0.48: 0.82].
</p>

<p style = "color: #FF78F0;
            font: bold 19px arial;
            padding: 15px;
            background-color: #111;
            border: 3px solid violet;
            border-radius: 8px">
    ‚ô£ Last Evaluation Column üíØ
</p>
"""

fig = px.box(
    x = df["last_evaluation"],
    title= "Evaluation Distribution & 5-Summary",
    template="plotly_dark",
    labels={"x" :"Last Evaluation"},
)

custome_layout(showlegend=False)

iplot(fig)

print(f'Evaluation Data Skewness: {np.round(df["last_evaluation"].skew(), 3)}')

"""<p style = "color: gold;
            font: bold 20px arial;
            padding: 15px;
            background-color: #112">
 #  From Our Box Plot üëåüòâ
    <br>
    <br>
    ‚ñ∫ We Can Notice that The Last Evaluation Data has a Slight Left Skewness.
    <br>
    ‚Üí So The Distribution Can Be Considered Approximately Symmetrical
    <br>
    <br>
    ‚ñ∫ 50% of Sataisfaction Level Data In The Range [0.57: 0.86].
</p>

<p style = "color: #FF78F0;
            font: bold 19px arial;
            padding: 15px;
            background-color: #111;
            border: 3px solid violet;
            border-radius: 8px">
    ‚ô£ Number Projects Column üíØ
</p>
"""

projects = df["number_project"].value_counts()
projects

fig = px.bar(data_frame = projects,
             x = projects.index,
             y = projects / sum(projects) * 100,
             color = projects.index.astype(str),
             title = "Percentage of Employees Through Number of Completed Projects",
             color_discrete_sequence=["#E26EE5"],
             labels= {"number_project" :"# Completed Projects", "y": "Employees Frequency in PCT(%)"},
             template="plotly_dark",
             text = projects.apply(lambda x: f"{x / sum(projects) * 100:0.0f}%"))

custome_layout(title_size=24)


fig.update_traces(
    textfont = {
        "size" : 16,
        "family" :"arial",
        "color": "#fff"
    },
    hovertemplate = "# Completed Projects: %{x}<br>Percentage of Employees: %{y:0.1f}%",
)

iplot(fig)

"""<p style = "color: #FF78F0;
            font: bold 19px arial;
            padding: 15px;
            background-color: #111;
            border: 3px solid violet;
            border-radius: 8px">
    ‚ô£ Average Monthly Hours Column üë∑‚Äç‚ôÇÔ∏è
</p>
"""

fig = px.histogram(
    x = df["average_montly_hours"],
    title= "Average Monthly Hours Distribution",
    template="plotly_dark",
    labels={"x" :"Average Monthly Hours"},
    nbins=25,
    color_discrete_sequence=["#FF78F0"]
)

custome_layout(showlegend=False)
fig.update_traces(
    textfont = {
        "size" : 20,
        "family" :"tahoma",
        "color": "#fff"
    },
    hovertemplate = "Avg Hours: %{x}<br>Frequency: %{y}",
    marker=dict(line=dict(color='#000', width=0.1))
)


iplot(fig)

df["average_montly_hours"].mode()

"""<p style = "color: gold;
            font: bold 20px arial;
            padding: 15px;
            background-color: #112">
 #  From Histogram ü§îüìä
    <br>
    <br>
    ‚ñ∫ We Can Notice that The average montly hours Data IS Bimodela Distribution.
    <br>
    ‚ñ∫ Has Two Distinct Group (149, 156)
</p>

<p style = "color: #FF78F0;
            font: bold 19px arial;
            padding: 15px;
            background-color: #111;
            border: 3px solid violet;
            border-radius: 8px">
    ‚ô£ Department Column üë∑‚Äç‚ôÇÔ∏è
</p>
"""

dep = df["Department"].value_counts()
dep

dep = dep[::-1]
fig = px.bar(data_frame = projects,
             y = dep.index,
             x = dep / sum(dep) * 100,
             color = dep.index.astype(str),
             title = "Percentage of Employees In Departments",
             color_discrete_sequence=["#E26EE5"],
             labels= {"x" :"Employees PCT(%)", "y": "Department"},
             template="plotly_dark",
             text = dep.apply(lambda x: f"{x / sum(projects) * 100:0.0f}%"))

custome_layout(title_size=24)


fig.update_traces(
    textfont = {
        "size" : 16,
        "family" :"arial",
        "color": "#fff"
    },
    hovertemplate = "Department: %{y}<br>Percentage of Employees: %{x:0.1f}%",
)

iplot(fig)

"""<p style = "color: #FF78F0;
            font: bold 19px arial;
            padding: 15px;
            background-color: #111;
            border: 3px solid violet;
            border-radius: 8px">
    ‚ô£ Promotion Column ü§©
</p>
"""

promotion = df["promotion_last_5years"].value_counts()

fig = px.pie(data_frame = promotion,
             names = ["Promoted" if i ==1 else "Not Promoted" for i in promotion.index],
             values=  promotion,
             title = "Promotion Last 5 Years",
             color_discrete_sequence=["#DD58D6", "#FFE79B"],
             labels= {"number_project" :"# Completed Projects", "y": "Employees Frequency in PCT(%)"},
             template="plotly_dark",
            )

custome_layout(showlegend=True, title_size=28)


fig.update_traces(
    textfont = {
        "size" : 16,
        "family" :"arial",
        "color": "#fff"
    },
    hovertemplate = "Salary Category: %{label}<br>Percentage of Employees: %{value}<br>Percentage of Employees: %{percent}",
    marker=dict(line=dict(color='#000000', width=0.5)),
    pull=[0, 0.1],
)

iplot(fig)

"""<p style = "color: #FF78F0;
            font: bold 19px arial;
            padding: 15px;
            background-color: #111;
            border: 3px solid violet;
            border-radius: 8px">
    ‚ô£ Salary Column üí∞üíµ
</p>
"""

salary = df["salary"].value_counts()
salary

fig = px.bar(data_frame = salary,
             x = salary.index,
             y = salary / sum(salary) * 100,
             color = salary.index.astype(str),
             title = "Employess Through Salary",
             color_discrete_sequence=["#E26EE5"],
             labels= {"number_project" :"# Completed Projects", "y": "Employees Frequency in PCT(%)"},
             template="plotly_dark",
             text = salary.apply(lambda x: f"{x / sum(projects) * 100:0.0f}%"))

custome_layout(title_size=28)


fig.update_traces(
    textfont = {
        "size" : 16,
        "family" :"arial",
        "color": "#fff"
    },
    hovertemplate = "Salary Category: %{x}<br>Percentage of Employees: %{y:0.1f}%",
)

iplot(fig)

"""<p style = "color: #FF78F0;
            font: bold 19px arial;
            padding: 15px;
            background-color: #111;
            border: 3px solid violet;
            border-radius: 8px">
    ‚ô£ Left Column
</p>
"""

left = df["left"].value_counts(normalize=1)*100
left

fig = px.bar(data_frame = left,
             x = ["Left" if i == 1 else "Stay" for i in left.index],
             y = left,
             color = left.index.astype(str),
             title = "Employess Through Left Job Condition",
             color_discrete_sequence=["#E26EE5"],
             labels= {"x" :"Left Condition", "y": "Employees Frequency in PCT(%)"},
             template="plotly_dark",
             text_auto= "0.2f"
            )

custome_layout(title_size=28)


fig.update_traces(
    textfont = {
        "size" : 16,
        "family" :"arial",
        "color": "#fff"
    },
    hovertemplate = "Left: %{x}<br>Percentage of Employees: %{y:0.1f}%",
)

iplot(fig)

"""<p style = "color: gold;
            font: bold 20px arial;
            padding: 15px;
            background-color: #112">
 #  From This ü§îüìä
    <br>
    <br>
    ‚ñ∫ We Can Notice that The Data is UMBALANCED.
    <br>
</p>

# Time to ask question and get spectacular insightsüòçü§©

<p style = "color: #F3CCFF;
            font: bold 22px arial;
            padding: 15px;
            background-color: #111;
            border: 3px solid violet;
            border-radius: 8px">
    ‚ô£ For each department, what is the ratio of employees who left the company compared to those who didn't leave?!
</p>
"""

left_count = df.groupby("Department", as_index=False)["left"].count()

dep_group_left = df.groupby("Department", as_index=False)["left"].value_counts()
dep_group_left["left"] = dep_group_left["left"].map({1: "Left", 0:"Stay"})

dep_group_left  =pd.merge(left_count, dep_group_left, on="Department")
dep_group_left["count_percent"] = np.round(dep_group_left["count"] / dep_group_left["left_x"] * 100, 2)

dep_group_left.drop(columns = "left_x", inplace=True)
dep_group_left.head()

fig = px.bar(
    dep_group_left,
    x = "Department",
    y = "count_percent",
    color="left_y",
    barmode="group",
    title = "Employess Through Salary",
    labels= {"number_project" :"# Completed Projects", "y": "Employees Frequency in PCT(%)", "left_y" :"Left Labels"},
    template="plotly_dark",
    text = dep_group_left["count_percent"].apply(lambda x: f'{x:0.0f}%'),
    hover_data="count",


)

custome_layout(showlegend=True,title_size=28)


fig.update_traces(
    textfont = {
        "size" : 13,
        "family" :"consolas",
        "color": "#fff"
    },
    hovertemplate = "Department: %{x}<br>Percentage of Employees: %{y:,.0f}%",
)

iplot(fig)

"""<p style = "color: #F3CCFF;
            font: bold 22px arial;
            padding: 15px;
            background-color: #111;
            border: 3px solid violet;
            border-radius: 8px">
    ‚ô£ What is the percentage of employees who had a job accident and left work?!
</p>
"""

acc_group_left = df.groupby("Work_accident", as_index=False)["left"].value_counts()
acc_group_left["left"] = acc_group_left["left"].map({1: "Left", 0:"Stay"})
acc_group_left["Work_accident"] = acc_group_left["Work_accident"].map({1: "Had Accident", 0:"Had No Accident"})
acc_group_left



fig = px.bar(
    acc_group_left,
    x = "Work_accident",
    y = "count",
    color="left",
    barmode="group",
    title = "Accident & Left The Job",
    labels= {"Work_accident" :"Work Aaccident", "count": "Employees Frequency in PCT(%)"},
    template="plotly_dark",
    text = acc_group_left["count"].apply(lambda x: f'{(x / sum(acc_group_left["count"]) * 100):0.0f}%'),


)

custome_layout(showlegend=True,title_size=28)


fig.update_traces(
    textfont = {
        "size" : 13,
        "family" :"consolas",
        "color": "#fff"
    },
    hovertemplate = "Department: %{x}<br>Percentage of Employees: %{y:,.0f}%",
)

iplot(fig)

"""<p style = "color: gold;
            font: bold 20px arial;
            padding: 15px;
            background-color: #112">
 #  From This Insight ü§îüìä
    <br>
    Accidents do not significantly impact employees leaving their jobs.üßêüßê
</p>

# correlation heat map & charts üë©‚Äçüíªüòç
"""

correlation = df.corr(numeric_only=True)

fig = px.imshow(
    correlation,
    template = "plotly_dark",
    text_auto = "0.3f",
    aspect=1,
    color_continuous_scale="orrd",
    title= "Correlations Between Data"
)

fig.update_layout(
    title = {
        "font" :{
            "size" : 28,
            "family" : "tahoma"
        }
    }
)
iplot(fig)

"""# I think it's time now to build our model!!ü§©üë®‚Äçüíª

<p style = "color: #F3CCFF;
            font: bold 22px arial;
            padding: 15px;
            background-color: #111;
            border: 3px solid violet;
            border-radius: 8px">
    1] Encoding Categorical Data: (Converting Categorical Into Numerical)
</p>
"""

df_encodded = pd.get_dummies(df, columns=['salary'], drop_first=True) *1

X = df_encodded.drop(columns= ["left", "Department", "Work_accident", "number_project", "promotion_last_5years"])
y = df_encodded["left"]

"""<p style = "color: #F3CCFF;
            font: bold 22px arial;
            padding: 15px;
            background-color: #111;
            border: 3px solid violet;
            border-radius: 8px">
    2] Convert The Data Into Balanced Data
</p>
"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=0)

"""<p style = "color: #F3CCFF;
            font: bold 22px arial;
            padding: 15px;
            background-color: #111;
            border: 3px solid violet;
            border-radius: 8px">
    2] Intialize KFold
</p>
"""

kf = KFold(n_splits=5, shuffle=True, random_state=31)

"""<p style = "color: #F3CCFF;
            font: bold 22px arial;
            padding: 15px;
            background-color: #111;
            border: 3px solid violet;
            border-radius: 8px">
   3] Build RandomForist Model
</p>
"""

model = RandomForestClassifier(n_estimators=150, random_state=45) # 500

"""<p style = "color: #F3CCFF;
            font: bold 22px arial;
            padding: 15px;
            background-color: #111;
            border: 3px solid violet;
            border-radius: 8px">
   3] Apply Corss Validate Score
</p>
"""

model_score = cross_val_score(model,X, y, cv=kf)
print(f"Model Score: {np.mean(model_score)*100: 0.2f}")

"""<p style = "color: #F3CCFF;
            font: bold 22px arial;
            padding: 15px;
            background-color: #111;
            border: 3px solid violet;
            border-radius: 8px">
   5] Fit The Model
</p>
"""

model.fit(X_train, y_train)

score = model.score(X_train, y_train)*100
print(f"Model Score: {score: 0.2f}")

predictions = model.predict(X_test)

accuracy = accuracy_score(y_test, predictions)*100
print(f"Model Score: {accuracy: 0.2f}")

cm = confusion_matrix(y_test, predictions)
fig = px.imshow(cm, aspect=True, text_auto=",.0f", template="plotly_dark",
          color_continuous_scale="orrd", x = ["Stay", "Left"], y = ["Saty", "Left"])

iplot(fig)

print(classification_report(y_test, predictions))

from joblib import dump

# Save the model using joblib
dump(model, "random_forest_model.joblib")


"""# ‚ô† Streamlit Web APP ü§©üöÄ

## Web App Link: <a href = "https://forecasting-employee-retention-anvfmkczqt9n7fbdkkpz3e.streamlit.app/" style = "color: tomato">Click Here To Visit Streamlit Web App</a>ü•∞üìä

## GitHub Repo: <a href = "https://github.com/modyehab810/Forecasting-Employee-Retention">Click Here To Go To GitHub Repo..</a>

![image.png](attachment:image.png)
"""